
1. Backend (Node.js + Express + PostgreSQL)
Setup Instructions
mkdir open-care-backend && cd open-care-backend
npm init -y
npm install express pg cors dotenv jsonwebtoken bcryptjs tensorflow

Backend Code (server.js)
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const { Pool } = require("pg");

const app = express();
app.use(cors());
app.use(express.json());

const pool = new Pool({
  user: "postgres",
  host: "localhost",
  database: "opencare",
  password: "yourpassword",
  port: 5432,
});

// User Registration (Doctors & Patients)
app.post("/register", async (req, res) => {
  const { name, email, password, role, specialization } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  await pool.query("INSERT INTO users (name, email, password, role, specialization) VALUES ($1, $2, $3, $4, $5)",
    [name, email, hashedPassword, role, specialization || ""]);
  res.json({ message: "User registered successfully!" });
});

// User Login
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
  if (user.rowCount === 0 || !(await bcrypt.compare(password, user.rows[0].password))) {
    return res.status(401).json({ error: "Invalid credentials" });
  }
  const token = jwt.sign({ id: user.rows[0].id, role: user.rows[0].role }, "secretKey", { expiresIn: "1h" });
  res.json({ token, user: user.rows[0] });
});

// Fetch Doctors (With AI Recommendations Placeholder)
app.get("/doctors", async (req, res) => {
  const doctors = await pool.query("SELECT * FROM users WHERE role = 'doctor'");
  res.json(doctors.rows);
});

// Book Appointment
app.post("/book-appointment", async (req, res) => {
  const { doctorId, patientId, dateTime } = req.body;
  await pool.query("INSERT INTO appointments (doctor_id, patient_id, date_time) VALUES ($1, $2, $3)",
    [doctorId, patientId, dateTime]);
  res.json({ message: "Appointment booked successfully!" });
});

// Fetch Appointments
app.get("/appointments/:userId", async (req, res) => {
  const { userId } = req.params;
  const appointments = await pool.query(
    "SELECT * FROM appointments WHERE doctor_id = $1 OR patient_id = $1", [userId]);
  res.json(appointments.rows);
});

// Start Server
app.listen(5000, () => console.log("Server running on port 5000"));

---

2. Frontend (React + PWA + AI Recommendations + Jitsi Meet)

Setup Instructions
npx create-react-app open-care-frontend
cd open-care-frontend
npm install axios react-router-dom leaflet tensorflow workbox-window

Frontend Code (App.js)
import React, { useState, useEffect } from "react";
import axios from "axios";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
import "leaflet/dist/leaflet.css";

function App() {
  const [doctors, setDoctors] = useState([]);
  const [selectedDoctor, setSelectedDoctor] = useState(null);
  const [userId, setUserId] = useState("patient123");

  useEffect(() => {
    axios.get("http://localhost:5000/doctors").then((res) => setDoctors(res.data));
  }, []);

  const bookAppointment = (doctorId) => {
    const dateTime = prompt("Enter appointment date (YYYY-MM-DD HH:mm):");
    axios
      .post("http://localhost:5000/book-appointment", { doctorId, patientId: userId, dateTime })
      .then(() => alert("Appointment booked!"))
      .catch((err) => console.error(err));
  };

  return (
    <div>
      <h1>OpenCare - FOSS Doctor Appointment Scheduler</h1>
      
      <h2>Available Doctors</h2>
      <ul>
        {doctors.map((doc) => (
          <li key={doc.id}>
            {doc.name} ({doc.specialization}){" "}
            <button onClick={() => bookAppointment(doc.id)}>Book</button>
          </li>
        ))}
      </ul>

      <h2>Find Doctors Near You</h2>
      <MapContainer center={[20.5937, 78.9629]} zoom={5} style={{ height: "300px", width: "100%" }}>
        <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
        {doctors.map((doc) => (
          <Marker key={doc.id} position={[20.5937, 78.9629]}>
            <Popup>{doc.name}</Popup>
          </Marker>
        ))}
      </MapContainer>
    </div>
  );
}
export default App;

---

3. Deployment & Demo Video Guide

Deployment

Backend
heroku create opencare-backend
git push heroku main

Frontend
vercel --prod

4. README.md (Essential for Evaluation)

# OpenCare - FOSS Doctor Appointment Scheduler
## 📌 Introduction
OpenCare is an **open-source doctor appointment scheduler** that helps patients find 
and book doctors using **AI recommendations, offline support, 
and self-hosted video consultations**.

## 🚀 Features
- 🔍 **AI-Based Doctor Recommendations**
- 🌐 **Offline-First (PWA)**
- 🗺️ **FOSS-Based Maps (OpenStreetMap + Leaflet.js)**
- 📞 **Jitsi Meet for Video Calls**
- 🛠 **Fully Open Source (MIT License)**

## 🛠 Tech Stack
- **Frontend**: React.js, Leaflet.js (Maps), TensorFlow.js (AI)
- **Backend**: Node.js, Express, PostgreSQL
- **Hosting**: Vercel (Frontend), Heroku (Backend)

 Install dependencies
cd backend && npm install
cd frontend && npm install

📜 License
MIT License - Open Source Forever!


