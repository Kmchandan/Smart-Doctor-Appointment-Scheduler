OpenCare -  Doctor Appointment Scheduler

1. Problem Statement

Patients often struggle to find available doctors and book appointments efficiently. 
OpenCare is a fully open-source appointment scheduling platform that simplifies the process while ensuring privacy, interoperability,
and offline support.

---

2. Features (MVP)

For Patients
âœ… FOSS-Compliant User Authentication (Self-hosted JWT-based, No Google/Facebook)
âœ… Search doctors by specialization & location (OpenStreetMap + Leaflet.js)
âœ… View available time slots
âœ… Book an appointment
âœ… Offline Booking Support (PWA with Workbox)
âœ… View appointment history

For Doctors
âœ… User authentication (Signup/Login)
âœ… Manage available time slots
âœ… Accept or reject appointments
âœ… View upcoming appointments

For Admin (Optional, if time permits)
âœ… Manage users (doctors & patients)
âœ… Approve/reject doctor profiles

---

3. Tech Stack (FOSS-Compliant)

Frontend: React.js (PWA) + Leaflet.js (OpenStreetMap)
Backend: Node.js (Express)
Database: PostgreSQL / Supabase (FOSS alternative to Firebase)
Authentication: JWT (Self-hosted)
Offline Mode: Service Workers (Workbox)
Video Calls: Jitsi Meet (Self-hosted)

---

4. System Design (Basic Flow)

*. User Authentication â†’ Patients & doctors register and log in.
*. Doctor Profile Setup â†’ Doctors enter their specialization and availability.
*. Search & View Doctors â†’ Patients filter doctors by specialty & location (using OpenStreetMap).
*. Appointment Booking â†’ Patients select a time slot and confirm the booking.
*. Doctor approval â†’ Doctors can accept or reject bookings.
*. Offline Support â†’ Patients can book and manage appointments even without an internet connection.
*. Self-Hosted Video Calls â†’ Jitsi Meet integration for remote consultations.

---

5. Database Schema (Example - PostgreSQL/Supabase)

Users Table (Doctors & Patients)

CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  role TEXT CHECK (role IN ('doctor', 'patient')),
  specialization TEXT DEFAULT NULL,
  available_slots TEXT[]
);

Appointments Table

CREATE TABLE appointments (
  id SERIAL PRIMARY KEY,
  doctor_id INTEGER REFERENCES users(id),
  patient_id INTEGER REFERENCES users(id),
  date_time TIMESTAMP NOT NULL,
  status TEXT CHECK (status IN ('pending', 'confirmed', 'canceled'))
);

---

6. Deployment (FOSS-Friendly Hosting)

Frontend: Vercel / Netlify
Backend: Railway.app / Render.com
Database: Supabase (FOSS alternative to Firebase)

7. Future Enhancements (Beyond MVP - Post Hackathon)

ðŸš€ AI-based Doctor Recommendations (Using TensorFlow.js)
ðŸ“ž Encrypted Messaging Between Doctors & Patients (WebSockets)
ðŸ’³ Payment Gateway for Paid Consultations (Only using Open-Source Payment Systems)
ðŸ“± Mobile App Version (React Native / Flutter with FOSS Plugins)

---

Why OpenCare is FOSS-Compliant for the Hackathon?

âœ” No proprietary APIs or services used
âœ” Fully open-source & licensed under MIT
âœ” Beyond simple CRUD (Offline mode, AI, Video Calls)
âœ” Self-hosted authentication & video consultations
âœ” Clear documentation & demo video for evaluation

---

8. Submission Requirements Checklist

âœ… Well-structured README.md (Clear project overview, setup, usage)
âœ… Plagiarism-free code with proper credits
âœ… GitHub Repository with commits showing progress

---
